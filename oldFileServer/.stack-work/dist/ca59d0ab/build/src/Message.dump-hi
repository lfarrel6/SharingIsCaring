
==================== FINAL INTERFACE ====================
2017-12-15 17:11:17.3465005 UTC

interface FileServerV2-0.1.0.0-KgV5BA6qDQ17iZd2zIr7zY:Message 8002
  interface hash: 76f8f4221eda43e3c04b168ef55b3495
  ABI hash: 4145ff39167b61668590dffba3c9b250
  export-list hash: 6ecc127ae74c40dab95d3cd7e1a96248
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f8b847b675a91348479da0c1f8d4b9ba
  sig of: Nothing
  used TH splices: False
  where
exports:
  Message.deleteF
  Message.existsF
  Message.finish
  Message.hello
  Message.readF
  Message.stateF
  Message.writeF
  Message.Message
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.IO 4d461f9283683225c61e68db403481ad
import  -/  base-4.9.1.0:GHC.Read 823163de9fa29f31f251382abc171b2b
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5cc8ec62ab8aeda628247695b64f5e42
import  -/  base-4.9.1.0:Text.Read 3cc85705eeac93ec93da7f5edfd7bc15
import  -/  base-4.9.1.0:Text.Read.Lex a861691fe58d2d0a125f55a5ebadf631
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage :: GHC.Read.Read Message.Message
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Message.Message
                  Message.$fReadMessage_$creadsPrec
                  Message.$fReadMessage_$creadList
                  Message.$fReadMessage_$creadPrec
                  Message.$fReadMessage_$creadListPrec -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Message.Message] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Message.Message] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Message.Message
                   Message.$fReadMessage2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Message.Message>_R))
                   eta
                   @ b
                   eta1) -}
9d03469257566ad0a25bb9bdde581a2d
  $fReadMessage10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Delete"#) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage11 ::
    (Message.Message -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Message.Message -> Text.ParserCombinators.ReadP.P b1) ->
                 let {
                   lvl81 :: Text.ParserCombinators.ReadP.P b1
                   = let {
                       lvl82 :: Text.ParserCombinators.ReadP.P b1
                       = GHC.Read.$fReadChar2
                           Message.$fReadMessage6
                           @ b1
                           (\ (a1 :: GHC.IO.FilePath) -> k1 (Message.Write a1))
                     } in
                     Text.Read.Lex.expect2
                       @ b1
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString a2 Message.$fReadMessage12 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                               GHC.Types.True -> lvl82 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b1
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                   = \ (w4 :: ()) -> lvl81
                 } in
                 Text.ParserCombinators.ReadP.Look
                   @ b1
                   (\ (a :: GHC.Base.String) ->
                    (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                      @ b1
                      k)) -}
ea3f21bd47ee0d43aa62de1ddea1ed42
  $fReadMessage12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Write"#) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage13 ::
    (Message.Message -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Message.Message -> Text.ParserCombinators.ReadP.P b1) ->
                 let {
                   lvl81 :: Text.ParserCombinators.ReadP.P b1
                   = let {
                       lvl82 :: Text.ParserCombinators.ReadP.P b1
                       = GHC.Read.$fReadChar2
                           Message.$fReadMessage6
                           @ b1
                           (\ (a1 :: GHC.IO.FilePath) -> k1 (Message.Read a1))
                     } in
                     Text.Read.Lex.expect2
                       @ b1
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString a2 Message.$fReadMessage14 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                               GHC.Types.True -> lvl82 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b1
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                   = \ (w4 :: ()) -> lvl81
                 } in
                 Text.ParserCombinators.ReadP.Look
                   @ b1
                   (\ (a :: GHC.Base.String) ->
                    (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                      @ b1
                      k)) -}
11baa640af09c84205410f5d5c2032f8
  $fReadMessage14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Read"#) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)
                   Message.$fReadMessage20
                   Message.$fReadMessage16) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)
                   Message.$fReadMessage17
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec Message.Message))) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)
  {- Strictness: m,
     Unfolding: ((Message.$fReadMessage19,
                  Message.$fReadMessage18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Message.Message>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Message.Message>_R))))) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Message.Message -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Message.Message -> Text.ParserCombinators.ReadP.P b) ->
                 eta Message.Finish) -}
b8a5ba467f7c94aca580f36d5615a17a
  $fReadMessage19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Finish"#) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Message.Message
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Message.Message
                   Message.$fReadMessage3
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Message.Message>_R))) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)
  {- Strictness: m,
     Unfolding: ((Message.$fReadMessage22,
                  Message.$fReadMessage21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Message.Message>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Message.Message>_R))))) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Message.Message -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Message.Message -> Text.ParserCombinators.ReadP.P b) ->
                 eta Message.Hello) -}
e083c31714b1efa9c315edec928fc08e
  $fReadMessage22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Hello"#) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage23 :: Text.ParserCombinators.ReadP.P [Message.Message]
  {- Unfolding: (GHC.Read.list1
                   @ Message.Message
                   Message.$fReadMessage2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Message.Message>_R))
                   GHC.Read.$fRead()5
                   @ [Message.Message]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Message.Message])) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Message.Message
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec) ->
                 let {
                   ds2 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = GHC.Read.choose2 @ Message.Message Message.$fReadMessage15 n
                 } in
                 let {
                   ds1 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = case n of wild { GHC.Types.I# x ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 10#) of wild2 {
                       GHC.Types.False
                       -> (Text.ParserCombinators.ReadP.pfail1 @ Message.Message)
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R))
                       GHC.Types.True
                       -> Message.$fReadMessage13
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Message.Message>_R)) } }
                 } in
                 let {
                   ds3 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = case n of wild { GHC.Types.I# x ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 10#) of wild2 {
                       GHC.Types.False
                       -> (Text.ParserCombinators.ReadP.pfail1 @ Message.Message)
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R))
                       GHC.Types.True
                       -> Message.$fReadMessage11
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Message.Message>_R)) } }
                 } in
                 let {
                   ds4 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = case n of wild { GHC.Types.I# x ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 10#) of wild2 {
                       GHC.Types.False
                       -> (Text.ParserCombinators.ReadP.pfail1 @ Message.Message)
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R))
                       GHC.Types.True
                       -> Message.$fReadMessage9
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Message.Message>_R)) } }
                 } in
                 let {
                   ds5 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = case n of wild { GHC.Types.I# x ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 10#) of wild2 {
                       GHC.Types.False
                       -> (Text.ParserCombinators.ReadP.pfail1 @ Message.Message)
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R))
                       GHC.Types.True
                       -> Message.$fReadMessage7
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Message.Message>_R)) } }
                 } in
                 let {
                   ds6 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = case n of wild { GHC.Types.I# x ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 10#) of wild2 {
                       GHC.Types.False
                       -> (Text.ParserCombinators.ReadP.pfail1 @ Message.Message)
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R))
                       GHC.Types.True
                       -> Message.$fReadMessage4
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Message.Message>_R)) } }
                 } in
                 (\ @ b
                    (k :: Message.Message -> Text.ParserCombinators.ReadP.P b) ->
                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                    @ b
                    (ds2
                       `cast`
                     (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                       @ b
                       k)
                    (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                       @ b
                       (ds1
                          `cast`
                        (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                          @ b
                          k)
                       (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                          @ b
                          (ds3
                             `cast`
                           (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                             @ b
                             k)
                          (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                             @ b
                             (ds4
                                `cast`
                              (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                                @ b
                                k)
                             (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                @ b
                                (ds5
                                   `cast`
                                 (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                                   @ b
                                   k)
                                (ds6
                                   `cast`
                                 (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                                   @ b
                                   k))))))
                   `cast`
                 (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                           <Message.Message>_R))) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage4 ::
    (Message.Message -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Message.Message -> Text.ParserCombinators.ReadP.P b1) ->
                 let {
                   lvl81 :: Text.ParserCombinators.ReadP.P b1
                   = let {
                       lvl82 :: Text.ParserCombinators.ReadP.P b1
                       = GHC.Read.$fReadChar2
                           Message.$fReadMessage6
                           @ b1
                           (\ (a1 :: GHC.IO.FilePath) -> k1 (Message.State a1))
                     } in
                     Text.Read.Lex.expect2
                       @ b1
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString a2 Message.$fReadMessage5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                               GHC.Types.True -> lvl82 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b1
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                   = \ (w4 :: ()) -> lvl81
                 } in
                 Text.ParserCombinators.ReadP.Look
                   @ b1
                   (\ (a :: GHC.Base.String) ->
                    (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                      @ b1
                      k)) -}
c453afa6f0d0864afdfdc2b82d7c75ba
  $fReadMessage5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "State"#) -}
556a06380f1642f43d659e02ac95e180
  $fReadMessage6 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11#) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage7 ::
    (Message.Message -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Message.Message -> Text.ParserCombinators.ReadP.P b1) ->
                 let {
                   lvl81 :: Text.ParserCombinators.ReadP.P b1
                   = let {
                       lvl82 :: Text.ParserCombinators.ReadP.P b1
                       = GHC.Read.$fReadChar2
                           Message.$fReadMessage6
                           @ b1
                           (\ (a1 :: GHC.IO.FilePath) -> k1 (Message.Exists a1))
                     } in
                     Text.Read.Lex.expect2
                       @ b1
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString a2 Message.$fReadMessage8 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                               GHC.Types.True -> lvl82 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b1
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                   = \ (w4 :: ()) -> lvl81
                 } in
                 Text.ParserCombinators.ReadP.Look
                   @ b1
                   (\ (a :: GHC.Base.String) ->
                    (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                      @ b1
                      k)) -}
17fb1cfba62351b30d2ac49e54411654
  $fReadMessage8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Exists"#) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage9 ::
    (Message.Message -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Message.Message -> Text.ParserCombinators.ReadP.P b1) ->
                 let {
                   lvl81 :: Text.ParserCombinators.ReadP.P b1
                   = let {
                       lvl82 :: Text.ParserCombinators.ReadP.P b1
                       = GHC.Read.$fReadChar2
                           Message.$fReadMessage6
                           @ b1
                           (\ (a1 :: GHC.IO.FilePath) -> k1 (Message.Delete a1))
                     } in
                     Text.Read.Lex.expect2
                       @ b1
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString a2 Message.$fReadMessage10 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                               GHC.Types.True -> lvl82 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b1
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                   = \ (w4 :: ()) -> lvl81
                 } in
                 Text.ParserCombinators.ReadP.Look
                   @ b1
                   (\ (a :: GHC.Base.String) ->
                    (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                      @ b1
                      k)) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Message.Message]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Message.Message]
                   Message.$fReadMessage23) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Message.Message]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Message.$fReadMessage1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Message.Message]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Message.Message]>_R))) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Message.Message
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Message.$fReadMessage2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Message.Message>_R)) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fReadMessage_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Message.Message
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Message.Message
                   ((GHC.Read.parens1
                       @ Message.Message
                       Message.$fReadMessage3
                         `cast`
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Message.Message>_R))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                      @ Message.Message
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Message.Message))) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fShowMessage :: GHC.Show.Show Message.Message
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Message.Message
                  Message.$fShowMessage_$cshowsPrec
                  Message.$fShowMessage_$cshow
                  Message.$fShowMessage_$cshowList -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fShowMessage1 :: Message.Message -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Message.$fShowMessage_$cshowsPrec
                   Message.$fShowMessage2) -}
a6095aac070ffab7967d25912d131fc7
  $fShowMessage2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fShowMessage_$cshow :: Message.Message -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Message.Message) ->
                 Message.$fShowMessage_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fShowMessage_$cshowList :: [Message.Message] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Message.Message
                   Message.$fShowMessage1) -}
b5b7a878c44fbefc3633adbc378f8eaf
  $fShowMessage_$cshowsPrec ::
    GHC.Types.Int -> Message.Message -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
90df8863e188a3922a5f46c087f6c696
  $tc'Delete :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7331739480976975917##
                   2387041351576907942##
                   Message.$trModule
                   Message.$tc'Delete1) -}
d07fb387e59835422af6fbdb73bafa25
  $tc'Delete1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Delete"#) -}
025bb34577c886519faef18c909c0f07
  $tc'Exists :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6407062923354133998##
                   11772607626867009783##
                   Message.$trModule
                   Message.$tc'Exists1) -}
ae876dceaaca9ca4aa77525f77ed9424
  $tc'Exists1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Exists"#) -}
b05c5aa1a95b510d1324689e1fe1149f
  $tc'Finish :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5250340295545831382##
                   11845246394103490981##
                   Message.$trModule
                   Message.$tc'Finish1) -}
a724d4ab09f320146ff13832952e9567
  $tc'Finish1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Finish"#) -}
0ddf2136db6113f8bcf72f25c3434254
  $tc'Hello :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4619201079281488873##
                   13984025211812694148##
                   Message.$trModule
                   Message.$tc'Hello1) -}
b124289180e9b5ba6aabed4a1be15f8b
  $tc'Hello1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Hello"#) -}
0a57ba18c58b85b51561694cbe77b524
  $tc'Read :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12558538121676541355##
                   8155293284313342263##
                   Message.$trModule
                   Message.$tc'Read1) -}
223d4ad425b0c5798688653476a9e7e9
  $tc'Read1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Read"#) -}
a441bd22daa186e490ef05fa441f8088
  $tc'State :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14644275837336869061##
                   15104799677631353524##
                   Message.$trModule
                   Message.$tc'State1) -}
f81c0de3a427d77201971d8a111992df
  $tc'State1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'State"#) -}
38e9fafd0600f00259093d451dc6f33f
  $tc'Write :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17018360569884183463##
                   60186121582911606##
                   Message.$trModule
                   Message.$tc'Write1) -}
03b0f23e8a3ca7ca54b6d58d93fede2b
  $tc'Write1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Write"#) -}
913dde8ede50dc5960b10c9bf6eb83f3
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1752833628168897164##
                   17185615081547327209##
                   Message.$trModule
                   Message.$trModule1) -}
f3d45f35cb4b3f42d158fe3e44e3face
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Message.$trModule2
                   Message.$trModule1) -}
6bc12c56a560275644f251e5a1ceaafb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Message"#) -}
02d6faf190fe9500bc329c998e725c8a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "FileServerV2-0.1.0.0-KgV5BA6qDQ17iZd2zIr7zY"#) -}
b5b7a878c44fbefc3633adbc378f8eaf
  data Message
    = Read GHC.IO.FilePath
    | Write GHC.IO.FilePath
    | Delete GHC.IO.FilePath
    | Exists GHC.IO.FilePath
    | State GHC.IO.FilePath
    | Hello
    | Finish
c3a055781c40dde1998f8b9cd4ec537e
  deleteF :: GHC.IO.FilePath -> Message.Message
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (0, True, True) Message.Delete -}
002d9603604d91c9f793604bdc8caf99
  existsF :: GHC.IO.FilePath -> Message.Message
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m4,
     Unfolding: InlineRule (0, True, True) Message.Exists -}
21941707a8ff1ded83e433535ddf635b
  finish :: Message.Message
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Message.Finish -}
9ea7646cb586d51bdd9937e1adbfdd41
  hello :: Message.Message
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Message.Hello -}
fe0afff051610b20cad35824a885dc15
  readF :: GHC.IO.FilePath -> Message.Message
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (0, True, True) Message.Read -}
393d1fda88d849289708d2d7fad8515d
  stateF :: GHC.IO.FilePath -> Message.Message
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m5,
     Unfolding: InlineRule (0, True, True) Message.State -}
92f61e94e834bc4134a9c3c9b5101df4
  writeF :: GHC.IO.FilePath -> Message.Message
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True) Message.Write -}
instance [safe] GHC.Read.Read [Message.Message]
  = Message.$fReadMessage
instance [safe] GHC.Show.Show [Message.Message]
  = Message.$fShowMessage
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

