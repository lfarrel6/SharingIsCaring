
==================== FINAL INTERFACE ====================
2017-12-02 15:26:18.27075 UTC

interface FileServerV2-0.1.0.0-6BZsKY1l9t1iy3IKeXKwR:Message 8002
  interface hash: 348146a1a3e0b2b105ac0d00dd91d484
  ABI hash: d95ac3a5cf5d068995de6a7e65480083
  export-list hash: 640232fef3e6b5a6ba6f3b9614fce448
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f8b847b675a91348479da0c1f8d4b9ba
  sig of: Nothing
  used TH splices: False
  where
exports:
  Message.deleteF
  Message.existsF
  Message.finish
  Message.hello
  Message.readF
  Message.stateF
  Message.writeF
  Message.Message
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.IO 4d461f9283683225c61e68db403481ad
import  -/  base-4.9.1.0:GHC.Read 823163de9fa29f31f251382abc171b2b
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5cc8ec62ab8aeda628247695b64f5e42
import  -/  base-4.9.1.0:Text.Read 3cc85705eeac93ec93da7f5edfd7bc15
import  -/  base-4.9.1.0:Text.Read.Lex a861691fe58d2d0a125f55a5ebadf631
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage :: GHC.Read.Read Message.Message
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Message.Message
                  Message.$fReadMessage_$creadsPrec
                  Message.$fReadMessage_$creadList
                  Message.$fReadMessage_$creadPrec
                  Message.$fReadMessage_$creadListPrec -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Message.Message] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Message.Message] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Message.Message
                   Message.$fReadMessage2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Message.Message>_R))
                   eta
                   @ b
                   eta1) -}
69df285b84a9f4e7fe1e758a9dfdbfdf
  $fReadMessage10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Delete"#) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage11 ::
    (Message.Message -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Message.Message -> Text.ParserCombinators.ReadP.P b1) ->
                 let {
                   lvl81 :: Text.ParserCombinators.ReadP.P b1
                   = let {
                       lvl82 :: Text.ParserCombinators.ReadP.P b1
                       = GHC.Read.$fReadChar2
                           Message.$fReadMessage6
                           @ b1
                           (\ (a1 :: GHC.IO.FilePath) -> k1 (Message.Write a1))
                     } in
                     Text.Read.Lex.expect2
                       @ b1
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString a2 Message.$fReadMessage12 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                               GHC.Types.True -> lvl82 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b1
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                   = \ (w4 :: ()) -> lvl81
                 } in
                 Text.ParserCombinators.ReadP.Look
                   @ b1
                   (\ (a :: GHC.Base.String) ->
                    (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                      @ b1
                      k)) -}
e10430828a855823001994a1dfd0a020
  $fReadMessage12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Write"#) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage13 ::
    (Message.Message -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Message.Message -> Text.ParserCombinators.ReadP.P b1) ->
                 let {
                   lvl81 :: Text.ParserCombinators.ReadP.P b1
                   = let {
                       lvl82 :: Text.ParserCombinators.ReadP.P b1
                       = GHC.Read.$fReadChar2
                           Message.$fReadMessage6
                           @ b1
                           (\ (a1 :: GHC.IO.FilePath) -> k1 (Message.Read a1))
                     } in
                     Text.Read.Lex.expect2
                       @ b1
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString a2 Message.$fReadMessage14 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                               GHC.Types.True -> lvl82 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b1
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                   = \ (w4 :: ()) -> lvl81
                 } in
                 Text.ParserCombinators.ReadP.Look
                   @ b1
                   (\ (a :: GHC.Base.String) ->
                    (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                      @ b1
                      k)) -}
6c16acbbd2acd0437a3fc421cee376ad
  $fReadMessage14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Read"#) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage15 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)
                   Message.$fReadMessage20
                   Message.$fReadMessage16) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage16 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)
                   Message.$fReadMessage17
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec Message.Message))) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage17 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)
  {- Strictness: m,
     Unfolding: ((Message.$fReadMessage19,
                  Message.$fReadMessage18
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Message.Message>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Message.Message>_R))))) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage18 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Message.Message -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Message.Message -> Text.ParserCombinators.ReadP.P b) ->
                 eta Message.Finish) -}
a1b409bbe8d0ac29dce9d6f0008f5565
  $fReadMessage19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Finish"#) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Message.Message
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Message.Message
                   Message.$fReadMessage3
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Message.Message>_R))) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage20 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec Message.Message)
  {- Strictness: m,
     Unfolding: ((Message.$fReadMessage22,
                  Message.$fReadMessage21
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <Message.Message>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Message.Message>_R))))) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage21 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Message.Message -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: Message.Message -> Text.ParserCombinators.ReadP.P b) ->
                 eta Message.Hello) -}
67010edee7d9aed22e83cb546e64cbf9
  $fReadMessage22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Hello"#) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage23 :: Text.ParserCombinators.ReadP.P [Message.Message]
  {- Unfolding: (GHC.Read.list1
                   @ Message.Message
                   Message.$fReadMessage2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Message.Message>_R))
                   GHC.Read.$fRead()5
                   @ [Message.Message]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Message.Message])) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Message.Message
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: (\ (n :: Text.ParserCombinators.ReadPrec.Prec) ->
                 let {
                   ds2 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = GHC.Read.choose2 @ Message.Message Message.$fReadMessage15 n
                 } in
                 let {
                   ds1 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = case n of wild { GHC.Types.I# x ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 10#) of wild2 {
                       GHC.Types.False
                       -> (Text.ParserCombinators.ReadP.pfail1 @ Message.Message)
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R))
                       GHC.Types.True
                       -> Message.$fReadMessage13
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Message.Message>_R)) } }
                 } in
                 let {
                   ds3 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = case n of wild { GHC.Types.I# x ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 10#) of wild2 {
                       GHC.Types.False
                       -> (Text.ParserCombinators.ReadP.pfail1 @ Message.Message)
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R))
                       GHC.Types.True
                       -> Message.$fReadMessage11
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Message.Message>_R)) } }
                 } in
                 let {
                   ds4 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = case n of wild { GHC.Types.I# x ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 10#) of wild2 {
                       GHC.Types.False
                       -> (Text.ParserCombinators.ReadP.pfail1 @ Message.Message)
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R))
                       GHC.Types.True
                       -> Message.$fReadMessage9
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Message.Message>_R)) } }
                 } in
                 let {
                   ds5 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = case n of wild { GHC.Types.I# x ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 10#) of wild2 {
                       GHC.Types.False
                       -> (Text.ParserCombinators.ReadP.pfail1 @ Message.Message)
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R))
                       GHC.Types.True
                       -> Message.$fReadMessage7
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Message.Message>_R)) } }
                 } in
                 let {
                   ds6 :: Text.ParserCombinators.ReadP.ReadP Message.Message
                   = case n of wild { GHC.Types.I# x ->
                     case GHC.Prim.tagToEnum#
                            @ GHC.Types.Bool
                            (GHC.Prim.<=# x 10#) of wild2 {
                       GHC.Types.False
                       -> (Text.ParserCombinators.ReadP.pfail1 @ Message.Message)
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R))
                       GHC.Types.True
                       -> Message.$fReadMessage4
                            `cast`
                          (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <Message.Message>_R)) } }
                 } in
                 (\ @ b
                    (k :: Message.Message -> Text.ParserCombinators.ReadP.P b) ->
                  Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                    @ b
                    (ds2
                       `cast`
                     (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                       @ b
                       k)
                    (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                       @ b
                       (ds1
                          `cast`
                        (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                          @ b
                          k)
                       (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                          @ b
                          (ds3
                             `cast`
                           (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                             @ b
                             k)
                          (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                             @ b
                             (ds4
                                `cast`
                              (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                                @ b
                                k)
                             (Text.ParserCombinators.ReadP.$fAlternativeP_$c<|>
                                @ b
                                (ds5
                                   `cast`
                                 (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                                   @ b
                                   k)
                                (ds6
                                   `cast`
                                 (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                                   @ b
                                   k))))))
                   `cast`
                 (Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                           <Message.Message>_R))) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage4 ::
    (Message.Message -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Message.Message -> Text.ParserCombinators.ReadP.P b1) ->
                 let {
                   lvl81 :: Text.ParserCombinators.ReadP.P b1
                   = let {
                       lvl82 :: Text.ParserCombinators.ReadP.P b1
                       = GHC.Read.$fReadChar2
                           Message.$fReadMessage6
                           @ b1
                           (\ (a1 :: GHC.IO.FilePath) -> k1 (Message.State a1))
                     } in
                     Text.Read.Lex.expect2
                       @ b1
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString a2 Message.$fReadMessage5 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                               GHC.Types.True -> lvl82 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b1
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                   = \ (w4 :: ()) -> lvl81
                 } in
                 Text.ParserCombinators.ReadP.Look
                   @ b1
                   (\ (a :: GHC.Base.String) ->
                    (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                      @ b1
                      k)) -}
3b57ba0a5d08b58fd6f6bfdd2e42a575
  $fReadMessage5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "State"#) -}
ad9815d328435ca6aa0d09e3558c30bf
  $fReadMessage6 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 11#) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage7 ::
    (Message.Message -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Message.Message -> Text.ParserCombinators.ReadP.P b1) ->
                 let {
                   lvl81 :: Text.ParserCombinators.ReadP.P b1
                   = let {
                       lvl82 :: Text.ParserCombinators.ReadP.P b1
                       = GHC.Read.$fReadChar2
                           Message.$fReadMessage6
                           @ b1
                           (\ (a1 :: GHC.IO.FilePath) -> k1 (Message.Exists a1))
                     } in
                     Text.Read.Lex.expect2
                       @ b1
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString a2 Message.$fReadMessage8 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                               GHC.Types.True -> lvl82 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b1
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                   = \ (w4 :: ()) -> lvl81
                 } in
                 Text.ParserCombinators.ReadP.Look
                   @ b1
                   (\ (a :: GHC.Base.String) ->
                    (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                      @ b1
                      k)) -}
ab1f17ee9c5d19115e396c4bafe8932a
  $fReadMessage8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Exists"#) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage9 ::
    (Message.Message -> Text.ParserCombinators.ReadP.P b1)
    -> Text.ParserCombinators.ReadP.P b1
  {- Arity: 1,
     Unfolding: (\ @ b1
                   (k1 :: Message.Message -> Text.ParserCombinators.ReadP.P b1) ->
                 let {
                   lvl81 :: Text.ParserCombinators.ReadP.P b1
                   = let {
                       lvl82 :: Text.ParserCombinators.ReadP.P b1
                       = GHC.Read.$fReadChar2
                           Message.$fReadMessage6
                           @ b1
                           (\ (a1 :: GHC.IO.FilePath) -> k1 (Message.Delete a1))
                     } in
                     Text.Read.Lex.expect2
                       @ b1
                       (\ (a1 :: Text.Read.Lex.Lexeme) ->
                        case a1 of wild {
                          DEFAULT -> Text.ParserCombinators.ReadP.Fail @ b1
                          Text.Read.Lex.Ident a2
                          -> case GHC.Base.eqString a2 Message.$fReadMessage10 of wild1 {
                               GHC.Types.False -> Text.ParserCombinators.ReadP.Fail @ b1
                               GHC.Types.True -> lvl82 } })
                 } in
                 let {
                   k :: () -> Text.ParserCombinators.ReadP.P b1
                     {- Arity: 1, Strictness: <L,A>, Inline: INLINE[0],
                        Unfolding: InlineRule (1, True, True) (\ (w4 :: ()) -> lvl81) -}
                   = \ (w4 :: ()) -> lvl81
                 } in
                 Text.ParserCombinators.ReadP.Look
                   @ b1
                   (\ (a :: GHC.Base.String) ->
                    (Text.ParserCombinators.ReadP.skipSpaces_skip a)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <()>_R)
                      @ b1
                      k)) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Message.Message]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Message.Message]
                   Message.$fReadMessage23) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Message.Message]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Message.$fReadMessage1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Message.Message]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Message.Message]>_R))) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Message.Message
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Message.$fReadMessage2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Message.Message>_R)) -}
42969441060e8ba7b33c7237ef9b9b39
  $fReadMessage_$creadsPrec ::
    GHC.Types.Int -> Text.ParserCombinators.ReadP.ReadS Message.Message
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Message.Message
                   ((GHC.Read.parens1
                       @ Message.Message
                       Message.$fReadMessage3
                         `cast`
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <Message.Message>_R))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Message.Message>_R)
                      @ Message.Message
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Message.Message))) -}
42969441060e8ba7b33c7237ef9b9b39
  $fShowMessage :: GHC.Show.Show Message.Message
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Message.Message
                  Message.$fShowMessage_$cshowsPrec
                  Message.$fShowMessage_$cshow
                  Message.$fShowMessage_$cshowList -}
42969441060e8ba7b33c7237ef9b9b39
  $fShowMessage1 :: Message.Message -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Message.$fShowMessage_$cshowsPrec
                   Message.$fShowMessage2) -}
75baac39a0f91bfd6cff12bbd8627fb7
  $fShowMessage2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
42969441060e8ba7b33c7237ef9b9b39
  $fShowMessage_$cshow :: Message.Message -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Message.Message) ->
                 Message.$fShowMessage_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
42969441060e8ba7b33c7237ef9b9b39
  $fShowMessage_$cshowList :: [Message.Message] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Message.Message
                   Message.$fShowMessage1) -}
42969441060e8ba7b33c7237ef9b9b39
  $fShowMessage_$cshowsPrec ::
    GHC.Types.Int -> Message.Message -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
c0ce72a062e26c17e68d1287a46fe476
  $tc'Delete :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16424568630616880067##
                   14853158770815970348##
                   Message.$trModule
                   Message.$tc'Delete1) -}
7576de9cc5aca15087328a3ecdd6b962
  $tc'Delete1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Delete"#) -}
bdd89ac5885b815bc36037fd98af0b8a
  $tc'Exists :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5201001917019468031##
                   13946391648954000029##
                   Message.$trModule
                   Message.$tc'Exists1) -}
15958ac58e1a40842233bf67aae61b5b
  $tc'Exists1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Exists"#) -}
55f18d77bf92fdb327d50a0070d62ed2
  $tc'Finish :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12794932627698558521##
                   13918978997731782758##
                   Message.$trModule
                   Message.$tc'Finish1) -}
52dd29a4b32c306b041b389ce1c317a0
  $tc'Finish1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Finish"#) -}
7a157c857a2d8c83b9ad4aba0785fa0e
  $tc'Hello :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9362451540793908682##
                   15725255107176842372##
                   Message.$trModule
                   Message.$tc'Hello1) -}
5fdc79c0cbe67b1b7bc52ce3c289abcb
  $tc'Hello1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Hello"#) -}
eb0e184bc51271eadb6d8082ee113edc
  $tc'Read :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2865883234874278421##
                   12632689856134492189##
                   Message.$trModule
                   Message.$tc'Read1) -}
160d184490d1230eff541c1c90aac2f8
  $tc'Read1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Read"#) -}
fc94a7c94f7d740a9a11c9b04bb74629
  $tc'State :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10464766116656595352##
                   5059835521399056493##
                   Message.$trModule
                   Message.$tc'State1) -}
1440752924f48abe835af32836ef0325
  $tc'State1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'State"#) -}
c53f4563d81a37b10b4db1c1901ec95a
  $tc'Write :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3130153822122654134##
                   4793213857159357667##
                   Message.$trModule
                   Message.$tc'Write1) -}
f8c5c3348638e2c50753904906419754
  $tc'Write1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Write"#) -}
72cb4989d8a836076576f1769940b853
  $tcMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17235936068816857818##
                   4213176182621872946##
                   Message.$trModule
                   Message.$trModule1) -}
c008eb4be102b9d0f9b86aaf7eb48de1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Message.$trModule2
                   Message.$trModule1) -}
1e31bec6919181e6d6f73b86c422aff5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Message"#) -}
6694f641b6d629503cc538044443e9e5
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "FileServerV2-0.1.0.0-6BZsKY1l9t1iy3IKeXKwR"#) -}
42969441060e8ba7b33c7237ef9b9b39
  data Message
    = Read GHC.IO.FilePath
    | Write GHC.IO.FilePath
    | Delete GHC.IO.FilePath
    | Exists GHC.IO.FilePath
    | State GHC.IO.FilePath
    | Hello
    | Finish
174515f82c8588a8f8882c118252c5e6
  deleteF :: GHC.IO.FilePath -> Message.Message
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m3,
     Unfolding: InlineRule (0, True, True) Message.Delete -}
216f517f3263b87f8ff6e70649ec5892
  existsF :: GHC.IO.FilePath -> Message.Message
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m4,
     Unfolding: InlineRule (0, True, True) Message.Exists -}
4400ef13a2f2677097dc1129203689b8
  finish :: Message.Message
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Message.Finish -}
f25950c8959dc3152ab451f541d8954f
  hello :: Message.Message
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) Message.Hello -}
ea8212487d50e34382cde888d7cc39ac
  readF :: GHC.IO.FilePath -> Message.Message
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m1,
     Unfolding: InlineRule (0, True, True) Message.Read -}
0fde0296e42dfcacfa7a04d5665a2720
  stateF :: GHC.IO.FilePath -> Message.Message
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m5,
     Unfolding: InlineRule (0, True, True) Message.State -}
14be450a168682f93bf29c904aeaa6d5
  writeF :: GHC.IO.FilePath -> Message.Message
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True) Message.Write -}
instance [safe] GHC.Read.Read [Message.Message]
  = Message.$fReadMessage
instance [safe] GHC.Show.Show [Message.Message]
  = Message.$fShowMessage
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

