
==================== FINAL INTERFACE ====================
2017-12-01 16:02:51.305817 UTC

interface FileServerV2-0.1.0.0-6BZsKY1l9t1iy3IKeXKwR:Config 8002
  interface hash: 0847dba36eee1b6d9d947eb9cfdb365a
  ABI hash: 6708c9469436b7ec121266d57919449f
  export-list hash: cf84a67656da30aeb579745358c9e514
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f8b847b675a91348479da0c1f8d4b9ba
  sig of: Nothing
  used TH splices: False
  where
exports:
  Config.getConfig
  Config.Config{Config.Config directoryPort nServers startPort}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  base-4.9.1.0:System.Environment 438c0b0bc0f94461b9c946d062a7eab9
import  -/  base-4.9.1.0:System.IO 5daf3f384209c11d9566e3409af8ec5d
import  -/  base-4.9.1.0:Text.Read 3cc85705eeac93ec93da7f5edfd7bc15
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
f04bcbabe82742f579b35d97c60ca774
  $tc'Config :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3623434298881816228##
                   3107997537789380993##
                   Config.$trModule
                   Config.$tc'Config1) -}
4a930970ed2214ee72ca34265e4281c1
  $tc'Config1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Config"#) -}
8427360bdc05f139ce8fec63b45d34d2
  $tcConfig :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12256885912496322365##
                   994432314466972681##
                   Config.$trModule
                   Config.$trModule1) -}
d9f4b87979db5ebf6c88d8f6f62e7867
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Config.$trModule2
                   Config.$trModule1) -}
5f6a714f28f73e3a835ed7595606d3b8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Config"#) -}
d4d081c56423a31de7fcd77b06f12477
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "FileServerV2-0.1.0.0-6BZsKY1l9t1iy3IKeXKwR"#) -}
ec3eace59a4768618c8948a7f27c9219
  data Config
    = Config {directoryPort :: GHC.Types.Int,
              startPort :: GHC.Types.Int,
              nServers :: GHC.Types.Int}
13e14f48b349c58da90f85710cc7dc95
  directoryPort :: Config.Config -> GHC.Types.Int
  RecSel Left Config.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Config.Config) ->
                 case ds of wild { Config.Config ds1 ds2 ds3 -> ds1 }) -}
43787f0abe19054c1fd3a3ab06290955
  getConfig :: GHC.Types.IO (GHC.Base.Maybe Config.Config)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Config.getConfig1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe Config.Config>_R)) -}
23eb7f8c7b3abebbcdad89b849391992
  getConfig1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Config.Config #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Environment.getArgs2 s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> case GHC.Environment.getFullArgs1
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case System.Environment.dropRTSArgs ipv3 of wild1 {
                        []
                        -> case GHC.List.scanl2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     GHC.Base.Maybe Config.Config #)
                           of {}
                        : ds3 xs -> Config.getConfig2 xs ipv2 } }
                   GHC.Base.Just argv
                   -> case argv of wild1 {
                        []
                        -> case GHC.List.scanl2
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     GHC.Base.Maybe Config.Config #)
                           of {}
                        : ds2 xs -> Config.getConfig2 xs ipv } } }) -}
59ce613b70c98c13ee2165e39b20c608
  getConfig2 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe Config.Config #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (args :: [GHC.Base.String])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case args of wild {
                   [] -> (# eta, GHC.Base.Nothing @ Config.Config #)
                   : dp ds
                   -> case ds of wild1 {
                        [] -> (# eta, GHC.Base.Nothing @ Config.Config #)
                        : sp ds1
                        -> case ds1 of wild2 {
                             []
                             -> case GHC.IO.Handle.Text.hPutStr2
                                       GHC.IO.Handle.FD.stdout
                                       (Config.getConfig_confirmationString
                                          dp
                                          sp
                                          Config.getConfig_ns)
                                       GHC.Types.True
                                       eta of ds2 { (#,#) ipv ipv1 ->
                                (# ipv,
                                   GHC.Base.Just
                                     @ Config.Config
                                     (Config.Config
                                        (case Text.Read.readEither6
                                                @ GHC.Types.Int
                                                (Text.ParserCombinators.ReadP.run
                                                   @ GHC.Types.Int
                                                   Config.getConfig5
                                                   dp) of wild3 {
                                           [] -> Config.getConfig7
                                           : x ds3
                                           -> case ds3 of wild4 {
                                                [] -> x : ipv2 ipv3 -> Config.getConfig6 } })
                                        (case Text.Read.readEither6
                                                @ GHC.Types.Int
                                                (Text.ParserCombinators.ReadP.run
                                                   @ GHC.Types.Int
                                                   Config.getConfig5
                                                   sp) of wild3 {
                                           [] -> Config.getConfig7
                                           : x ds3
                                           -> case ds3 of wild4 {
                                                [] -> x : ipv2 ipv3 -> Config.getConfig6 } })
                                        Config.getConfig3) #) }
                             : ns ds2
                             -> case ds2 of wild3 {
                                  []
                                  -> case GHC.IO.Handle.Text.hPutStr2
                                            GHC.IO.Handle.FD.stdout
                                            (Config.getConfig_confirmationString dp sp ns)
                                            GHC.Types.True
                                            eta of ds3 { (#,#) ipv ipv1 ->
                                     (# ipv,
                                        GHC.Base.Just
                                          @ Config.Config
                                          (Config.Config
                                             (case Text.Read.readEither6
                                                     @ GHC.Types.Int
                                                     (Text.ParserCombinators.ReadP.run
                                                        @ GHC.Types.Int
                                                        Config.getConfig5
                                                        dp) of wild4 {
                                                [] -> Config.getConfig7
                                                : x ds4
                                                -> case ds4 of wild5 {
                                                     [] -> x : ipv2 ipv3 -> Config.getConfig6 } })
                                             (case Text.Read.readEither6
                                                     @ GHC.Types.Int
                                                     (Text.ParserCombinators.ReadP.run
                                                        @ GHC.Types.Int
                                                        Config.getConfig5
                                                        sp) of wild4 {
                                                [] -> Config.getConfig7
                                                : x ds4
                                                -> case ds4 of wild5 {
                                                     [] -> x : ipv2 ipv3 -> Config.getConfig6 } })
                                             (case Text.Read.readEither6
                                                     @ GHC.Types.Int
                                                     (Text.ParserCombinators.ReadP.run
                                                        @ GHC.Types.Int
                                                        Config.getConfig5
                                                        ns) of wild4 {
                                                [] -> Config.getConfig7
                                                : x ds4
                                                -> case ds4 of wild5 {
                                                     [] -> x
                                                     : ipv2 ipv3 -> Config.getConfig6 } })) #) }
                                  : ipv ipv1
                                  -> (# eta, GHC.Base.Nothing @ Config.Config #) } } } }) -}
fc27787e8a836d768d27010d144bfc8d
  getConfig3 :: GHC.Types.Int
  {- Unfolding: (case Text.Read.readEither6
                        @ GHC.Types.Int
                        Config.getConfig4 of wild {
                   []
                   -> GHC.Err.error
                        @ 'GHC.Types.PtrRepLifted
                        @ GHC.Types.Int
                        GHC.Err.errorWithoutStackTrace_wild1
                          `cast`
                        (Sym (GHC.Classes.N:IP[0]
                                  <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                        Text.Read.readEither4
                   : x ds
                   -> case ds of wild1 {
                        [] -> x
                        : ipv ipv1
                        -> GHC.Err.error
                             @ 'GHC.Types.PtrRepLifted
                             @ GHC.Types.Int
                             GHC.Err.errorWithoutStackTrace_wild1
                               `cast`
                             (Sym (GHC.Classes.N:IP[0]
                                       <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                             Text.Read.readEither2 } }) -}
7c5ac19f7e0cc7fe3dfcd5c40bb0a52a
  getConfig4 :: [(GHC.Types.Int, GHC.Base.String)]
  {- Unfolding: (Text.ParserCombinators.ReadP.run
                   @ GHC.Types.Int
                   Config.getConfig5
                   Config.getConfig_ns) -}
381a9225b5b0e756edd5db4e790313c9
  getConfig5 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
ef8327d53810303343a3ba20aa839549
  getConfig6 :: GHC.Types.Int
  {- Strictness: x -}
05a8abd209ef526c5c4085ed2966850e
  getConfig7 :: GHC.Types.Int
  {- Strictness: x -}
e91c37c235f795ea89a556c1a7ddad2c
  getConfig8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# " Server(s)"#) -}
99e06ecf38bfe588c6fddb4beb916653
  getConfig_confirmationString ::
    [GHC.Types.Char]
    -> [GHC.Types.Char] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,1*U>,
     Unfolding: (\ (dp :: [GHC.Types.Char])
                   (sp :: [GHC.Types.Char])
                   (ns :: [GHC.Types.Char]) ->
                 GHC.CString.unpackAppendCString#
                   "Initial Params\n\
                   \\t>Directory Server @ "#
                   (GHC.Base.++
                      @ GHC.Types.Char
                      dp
                      (GHC.CString.unpackAppendCString#
                         "\n\
                         \\t>File Servers @ "#
                         (GHC.Base.++
                            @ GHC.Types.Char
                            sp
                            (GHC.CString.unpackAppendCString#
                               "+\n\
                               \\t>"#
                               (GHC.Base.++ @ GHC.Types.Char ns Config.getConfig8)))))) -}
af5920161e7f9f543443285058bec28d
  getConfig_ns :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "1"#) -}
bad494f14a5ad42565c488cf9e375c8b
  nServers :: Config.Config -> GHC.Types.Int
  RecSel Left Config.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Config.Config) ->
                 case ds of wild { Config.Config ds1 ds2 ds3 -> ds3 }) -}
13bd035e26a1ade572212e481578fbcf
  startPort :: Config.Config -> GHC.Types.Int
  RecSel Left Config.Config
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Config.Config) ->
                 case ds of wild { Config.Config ds1 ds2 ds3 -> ds2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

